package cc.protea.spreedly.model;

import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;
import org.simpleframework.xml.Transient;

@Root(name = "transaction", strict = false)
public class SpreedlyTransactionRequest {
    /**
     * A unique string generated by Spreedly to identify a gateway.
     */
    @Transient
    public String gatewayAccountToken;

    /**
     * A unique string generated by Spreedly to identify a transaction.
     */
    @Transient
    public String referenceTransactionToken;

    /**
     * Any positive whole number, for example 1234 = $12.34.
     */
    @Element(name = "amount")
    public Integer amountInCents;

    /**
     * ISO 4217 Currency Code e.g., USD, MXN, EUR
     */
    @Element(name = "currency_code")
    public String currencyCode;

    /**
     * A unique string generated by Spreedly to identify a payment method.
     */
    @Element(name = "payment_method_token")
    public String paymentMethodToken;

    /**
     * Some gateways support specifying your own unique token for third party vaulting using store()
     */
    @Element(name = "third_party_token")
    public String thirdPartyToken;

    /**
     * Setting this value to true will make the payment method be saved permanently. Otherwise it will remain in the cached state for three minutes.
     */
    @Element(name = "retain_on_success")
    public boolean retainOnSuccess;

    /**
     * A merchant specified tracking number.
     */
    @Element(name = "order_id")
    public String orderId;

    /**
     * Description of product or service sold.
     */
    public String description;

    /**
     * Customer IP address.
     */
    @Element(name = "ip")
    public String clientIpAddress;

    /**
     * Customer email address.
     */
    public String email;

    /**
     * Custom name description that may end up on bank statement, depending on the gateway.
     */
    @Element(name = "merchant_name_descriptor")
    public String merchantNameDescriptor;

    /**
     * Custom location description that may end up on bank statement, depending on the gateway.
     */
    @Element(name = "merchant_location_descriptor")
    public String merchantLocationDescriptor;

    /**
     * Please see https://docs.spreedly.com/guides/3dsecure/ for usage instructions
     */
    @Element(name = "attempt_3dsecure")
    public boolean attempt3dSecure;

    /**
     * Please see https://docs.spreedly.com/guides/3dsecure/ for usage instructions
     */
    @Element(name = "redirect_url")
    public String redirectUrl;

    /**
     * The callback url will receive a POST back of all transactions that have changed since the last callback.
     * You should respond with a 200 OK response within 5 seconds. If Core does not receive back a 200 response
     * within this time, it will retry the callback again at least 4 times at ever-increasing intervals.
     */
    @Element(name = "callback_url")
    public String callbackUrl;

    /**
     * @return A unique string generated by Spreedly to identify a gateway.
     */
    public String getGatewayAccountToken() {
        return gatewayAccountToken;
    }

    /**
     * @param gatewayAccountToken A unique string generated by Spreedly to identify a gateway.
     */
    public SpreedlyTransactionRequest setGatewayAccountToken(final String gatewayAccountToken) {
        this.gatewayAccountToken = gatewayAccountToken;
        return this;
    }

    /**
     * @return A unique string generated by Spreedly to identify a transaction.
     */
    public String getReferenceTransactionToken() {
        return referenceTransactionToken;
    }

    /**
     * @param referenceTransactionToken A unique string generated by Spreedly to identify a transaction.
     */
    public SpreedlyTransactionRequest setReferenceTransactionToken(final String referenceTransactionToken) {
        this.referenceTransactionToken = referenceTransactionToken;
        return this;
    }

    /**
     * @return Any positive whole number, for example 1234 = $12.34.
     */
    public Integer getAmountInCents() {
        return amountInCents;
    }

    /**
     * @param amountInCents Any positive whole number, for example 1234 = $12.34.
     */
    public SpreedlyTransactionRequest setAmountInCents(final Integer amountInCents) {
        this.amountInCents = amountInCents;
        return this;
    }

    /**
     * @return ISO 4217 Currency Code e.g., USD, MXN, EUR
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * @param currencyCode ISO 4217 Currency Code e.g., USD, MXN, EUR
     */
    public SpreedlyTransactionRequest setCurrencyCode(final String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }

    /**
     * Some gateways support specifying your own unique token for third party vaulting using store()
     *
     * @return the third party token requested
     */
    public String getThirdPartyToken() {
        return thirdPartyToken;
    }

    /**
     * Some gateways support specifying your own unique token for third party vaulting using store()
     *
     * @param thirdPartyToken the third party token requested
     */
    public SpreedlyTransactionRequest setThirdPartyToken(final String thirdPartyToken) {
        this.thirdPartyToken = thirdPartyToken;
        return this;
    }

    /**
     * @return A unique string generated by Spreedly to identify a payment method.
     */
    public String getPaymentMethodToken() {
        return paymentMethodToken;
    }

    /**
     * @param paymentMethodToken A unique string generated by Spreedly to identify a payment method.
     */
    public SpreedlyTransactionRequest setPaymentMethodToken(final String paymentMethodToken) {
        this.paymentMethodToken = paymentMethodToken;
        return this;
    }

    /**
     * @return True will make the payment method be saved permanently. Otherwise it will remain in the cached state for three minutes.
     */
    public boolean isRetainOnSuccess() {
        return retainOnSuccess;
    }

    /**
     * @param retainOnSuccess Setting this value to true will make the payment method be saved permanently. Otherwise it will remain in the cached
     *                        state for three minutes.
     */
    public SpreedlyTransactionRequest setRetainOnSuccess(final boolean retainOnSuccess) {
        this.retainOnSuccess = retainOnSuccess;
        return this;
    }

    /**
     * @return A merchant specified tracking number.
     */
    public String getOrderId() {
        return orderId;
    }

    /**
     * @param orderId A merchant specified tracking number.
     */
    public SpreedlyTransactionRequest setOrderId(final String orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * @return Description of product or service sold.
     */
    public String getDescription() {
        return description;
    }

    /**
     * @param description Description of product or service sold.
     */
    public SpreedlyTransactionRequest setDescription(final String description) {
        this.description = description;
        return this;
    }

    /**
     * @return Customer IP address.
     */
    public String getClientIpAddress() {
        return clientIpAddress;
    }

    /**
     * @param clientIpAddress Customer IP address.
     */
    public SpreedlyTransactionRequest setClientIpAddress(final String clientIpAddress) {
        this.clientIpAddress = clientIpAddress;
        return this;
    }

    /**
     * @return Customer email address.
     */
    public String getEmail() {
        return email;
    }

    /**
     * @param email Customer email address.
     */
    public SpreedlyTransactionRequest setEmail(final String email) {
        this.email = email;
        return this;
    }

    /**
     * @return Custom name description that may end up on bank statement, depending on the gateway.
     */
    public String getMerchantNameDescriptor() {
        return merchantNameDescriptor;
    }

    /**
     * @param merchantNameDescriptor Custom name description that may end up on bank statement, depending on the gateway.
     */
    public SpreedlyTransactionRequest setMerchantNameDescriptor(final String merchantNameDescriptor) {
        this.merchantNameDescriptor = merchantNameDescriptor;
        return this;
    }

    /**
     * @return Custom location description that may end up on bank statement, depending on the gateway.
     */
    public String getMerchantLocationDescriptor() {
        return merchantLocationDescriptor;
    }

    /**
     * @param merchantLocationDescriptor Custom location description that may end up on bank statement, depending on the gateway.
     */
    public SpreedlyTransactionRequest setMerchantLocationDescriptor(final String merchantLocationDescriptor) {
        this.merchantLocationDescriptor = merchantLocationDescriptor;
        return this;
    }

    /**
     * @return if the system should use a multi-stage 3D Secure workflow. See https://docs.spreedly.com/guides/3dsecure/ for instructions.
     */
    public boolean isAttempt3dSecure() {
        return attempt3dSecure;
    }

    /**
     * @param attempt3dSecure true if the system should use a multi-stage 3D Secure workflow. See https://docs.spreedly.com/guides/3dsecure/ for
     *                        instructions.
     */
    public void setAttempt3dSecure(final boolean attempt3dSecure) {
        this.attempt3dSecure = attempt3dSecure;
    }

    /**
     * @return See https://docs.spreedly.com/guides/3dsecure/ for instructions.
     */
    public String getRedirectUrl() {
        return redirectUrl;
    }

    /**
     * @param redirectUrl See https://docs.spreedly.com/guides/3dsecure/ for instructions.
     */
    public void setRedirectUrl(final String redirectUrl) {
        this.redirectUrl = redirectUrl;
    }

    /**
     * The callback url will receive a POST back of all transactions that have changed since the last callback.
     * You should respond with a 200 OK response within 5 seconds. If Core does not receive back a 200 response within this time,
     * it will retry the callback again at least 4 times at ever-increasing intervals.
     *
     * @return The callback url
     */
    public String getCallbackUrl() {
        return callbackUrl;
    }

    /**
     * The callback url will receive a POST back of all transactions that have changed since the last callback.
     * You should respond with a 200 OK response within 5 seconds. If Core does not receive back a 200 response within this time,
     * it will retry the callback again at least 4 times at ever-increasing intervals.
     *
     * @param callbackUrl
     */
    public void setCallbackUrl(final String callbackUrl) {
        this.callbackUrl = callbackUrl;
    }


}