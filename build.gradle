import com.android.build.gradle.api.LibraryVariant

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:3.0.1"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.5.4"
    }
}

apply plugin: 'com.android.library'
apply plugin: "maven-publish"
apply plugin: "com.jfrog.artifactory"

archivesBaseName = "spreedly"
group = 'com.seatgeek.java.spreedly'
version = '1.1'
description = """spreedly"""

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.2"

    defaultConfig {
        versionCode 1
        versionName version
        minSdkVersion 16
        targetSdkVersion 26
        resourcePrefix "sge"
        resConfig "en"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {}

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
     mavenCentral()
}

dependencies {
    api(group: 'org.simpleframework', name: 'simple-xml', version:'2.7.1') {
        exclude(module: 'stax')
        exclude(module: 'stax-api')
        exclude(group: 'xpp3')
    }
    implementation group: 'com.squareup.okhttp', name: 'okhttp', version:'2.2.0'
    testImplementation group: 'junit', name: 'junit', version:'4.12'
}

publishing {
    publications {
        create('aar', MavenPublication.class) {
            def sdkVersionName = version
            def aarName = "$archivesBaseName-v$sdkVersionName-1"
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("${project.buildDir}/outputs/aar/${aarName}.aar")

            pom.withXml {
                def dependencies = asNode().appendNode("dependencies")
                project.configurations.getByName("releaseCompileClasspath").resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependency = dependencies.appendNode("dependency")
                    dependency.appendNode("groupId", it.moduleGroup)
                    dependency.appendNode("artifactId", it.moduleName)
                    dependency.appendNode("version", it.moduleVersion)
                }
            }
        }
    }
}

artifactory {
    contextUrl = "https://seatgeek.jfrog.io/seatgeek/"
    publish {
        repository {
            repoKey = 'seatgeek-enterprise-sdk'
            username = "${project.artifactoryUser}"
            password = "${project.artifactoryPassword}"
            maven = true
        }
        defaults {
            publications('aar')
            publishArtifacts = true
        }
    }
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        renameAar(archivesBaseName, variant)
    }
}

def renameAar(String archivesBaseName, LibraryVariant variant) {
    variant.outputs.each { output ->
        def baseName = archivesBaseName

        if (variant.name != "release") {
            baseName += "-${variant.buildType.name}"
        }

        baseName += "-v${android.defaultConfig.versionName}-${android.defaultConfig.versionCode}"

        output.outputFileName = baseName + ".aar"
    }
}
